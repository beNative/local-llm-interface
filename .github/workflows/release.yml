name: Automated Release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Validate tag and gather metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      notes: ${{ steps.changelog.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag matches package version
        id: version
        shell: bash
        run: |
          set -euo pipefail
          TAG_NAME="${GITHUB_REF_NAME}"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "::group::Version validation"
          echo "Tag name: ${TAG_NAME}"
          echo "package.json version: ${PACKAGE_VERSION}"
          if [[ "${TAG_NAME}" != "v${PACKAGE_VERSION}" ]]; then
            echo "::error::Tag name (${TAG_NAME}) does not match package.json version (${PACKAGE_VERSION})."
            exit 1
          fi
          if ! grep -q "## \[${PACKAGE_VERSION}\]" CHANGELOG.md; then
            echo "::error::Changelog entry for version ${PACKAGE_VERSION} not found."
            exit 1
          fi
          echo "Version validation succeeded."
          echo "::endgroup::"
          {
            echo "version=${PACKAGE_VERSION}"
            echo "tag=${TAG_NAME}"
          } >> "${GITHUB_OUTPUT}"

      - name: Extract changelog entry
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ steps.version.outputs.version }}"
          echo "::group::Extracting changelog for ${VERSION}"
          awk -v ver="${VERSION}" '
            BEGIN { capture=0 }
            /^## \[/ {
              if (capture) { exit }
              if ($0 ~ "\\[" ver "\\]") { capture=1; next }
            }
            capture { print }
          ' CHANGELOG.md > release-notes.md
          if [[ ! -s release-notes.md ]]; then
            echo "::error::Failed to locate changelog notes for version ${VERSION}."
            exit 1
          fi
          sed -i '1{/^$/d;}' release-notes.md
          echo "Changelog entry:" && cat release-notes.md
          echo "::endgroup::"
          {
            echo "notes<<EOF"
            cat release-notes.md
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: prepare
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: macOS x64
            os: macos-latest
            build-script: package:mac:x64
            electron-cache: ~/Library/Caches/electron
            electron-builder-cache: ~/Library/Caches/electron-builder
            npm-target-arch: x64
            artifact-suffix: macos-x64
          - name: Windows x64
            os: windows-latest
            build-script: package:win:x64
            electron-cache: 'C:\\Users\\runneradmin\\AppData\\Local\\electron\\Cache'
            electron-builder-cache: 'C:\\Users\\runneradmin\\AppData\\Local\\electron-builder\\Cache'
            npm-target-arch: x64
            artifact-suffix: windows-x64
          - name: Windows ia32
            os: windows-latest
            build-script: package:win:ia32
            electron-cache: 'C:\\Users\\runneradmin\\AppData\\Local\\electron\\Cache'
            electron-builder-cache: 'C:\\Users\\runneradmin\\AppData\\Local\\electron-builder\\Cache'
            npm-target-arch: ia32
            artifact-suffix: windows-ia32
          - name: Linux x64
            os: ubuntu-latest
            build-script: package:linux:x64
            electron-cache: ~/.cache/electron
            electron-builder-cache: ~/.cache/electron-builder
            npm-target-arch: x64
            artifact-suffix: linux-x64
          - name: Linux armv7l
            os: ubuntu-latest
            build-script: package:linux:armv7l
            electron-cache: ~/.cache/electron
            electron-builder-cache: ~/.cache/electron-builder
            npm-target-arch: arm
            artifact-suffix: linux-armv7l
          - name: Linux arm64
            os: ubuntu-latest
            build-script: package:linux:arm64
            electron-cache: ~/.cache/electron
            electron-builder-cache: ~/.cache/electron-builder
            npm-target-arch: arm64
            artifact-suffix: linux-arm64
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CSC_IDENTITY_AUTO_DISCOVERY: 'false'
      ELECTRON_CACHE: ${{ matrix.electron-cache }}
      ELECTRON_BUILDER_CACHE: ${{ matrix.electron-builder-cache }}
      npm_config_target_arch: ${{ matrix.npm-target-arch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Cache Electron downloads
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.electron-cache }}
            ${{ matrix.electron-builder-cache }}
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-electron-

      - name: Install dependencies
        run: npm install --no-fund --no-audit

      - name: Build release artifacts
        run: npm run ${{ matrix.build-script }}

      - name: Package platform bundle
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ needs.prepare.outputs.version }}"
          SUFFIX="${{ matrix.artifact-suffix }}"
          echo "::group::Preparing artifact archive for ${SUFFIX}"
          ls -R release || {
            echo "::error::Release directory is empty for ${SUFFIX}.";
            exit 1;
          }
          mkdir -p dist
          ARCHIVE="dist/local-llm-interface-${VERSION}-${SUFFIX}.tar.gz"
          tar -czf "${ARCHIVE}" -C release .
          echo "Created archive ${ARCHIVE}"
          echo "::endgroup::"

      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: local-llm-interface-${{ matrix.artifact-suffix }}
          path: dist/local-llm-interface-*.tar.gz
          if-no-files-found: error

  publish:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
      TAG: ${{ needs.prepare.outputs.tag }}
    steps:
      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: release

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          pattern: local-llm-interface-*
          merge-multiple: true

      - name: Summarize downloaded assets
        run: |
          echo "::group::Downloaded files"
          ls -R release release-artifacts
          echo "::endgroup::"

      - name: Generate download page
        id: downloads
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release
          DOWNLOAD_PAGE="release/downloads.md"
          {
            echo "| Platform | Download |"
            echo "| --- | --- |"
          } > "${DOWNLOAD_PAGE}"
          count=0
          while IFS= read -r -d '' file; do
            filename=$(basename "$file")
            suffix=${filename#local-llm-interface-${VERSION}-}
            suffix=${suffix%.tar.gz}
            case "$suffix" in
              macos-x64) platform="macOS x64" ;;
              windows-x64) platform="Windows x64" ;;
              windows-ia32) platform="Windows ia32" ;;
              linux-x64) platform="Linux x64" ;;
              linux-armv7l) platform="Linux armv7l" ;;
              linux-arm64) platform="Linux arm64" ;;
              *) platform="$suffix" ;;
            esac
            url="https://github.com/${{ github.repository }}/releases/download/${TAG}/${filename}"
            echo "| ${platform} | [${filename}](${url}) |" >> "${DOWNLOAD_PAGE}"
            ((count++))
          done < <(find release-artifacts -type f -name 'local-llm-interface-*.tar.gz' -print0)
          if [[ ${count} -eq 0 ]]; then
            echo "::error::No release artifacts were discovered for publishing."
            exit 1
          fi
          cat "${DOWNLOAD_PAGE}"

      - name: Create release body
        id: body
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release
          CHANGELOG_FILE="release/CHANGELOG.md"
          cat <<EOF > "${CHANGELOG_FILE}"
${{ needs.prepare.outputs.notes }}
EOF
          BODY_FILE="release/release-body.md"
          {
            echo "## Local LLM Interface ${TAG}"
            echo
            echo "### Changelog"
            cat "${CHANGELOG_FILE}"
            echo
            echo "### Downloads"
            cat release/downloads.md
          } > "${BODY_FILE}"
          echo "body-path=${BODY_FILE}" >> "${GITHUB_OUTPUT}"

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Local LLM Interface ${{ env.TAG }}
          body_path: ${{ steps.body.outputs.body-path }}
          files: |
            release-artifacts/local-llm-interface-*.tar.gz
            release/downloads.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
